public class ObtainBigger {
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        ExecutorService executor = Executors.newCachedThreadPool();
        // 需要查找最大数的数组
        Double data[] = new Double[]{210.32, 517.96, 986.77, 325.13};
        // 获取前两个里较大的
        BiggerCallable c1 = new BiggerCallable(data[0],data[1]);
        Future<Double> bigger1 = executor.submit(c1);
        // 获取后两个里较大的
        BiggerCallable c2 = new BiggerCallable(data[2],data[3]);
        Future<Double> bigger2 = executor.submit(c2);
        // 获取两个结果中较大的，这时会阻塞，只有前面两个结果都返回时才会往下进行
        BiggerCallable c = new BiggerCallable(bigger1.get(), bigger2.get());
        Future<Double> bigger = executor.submit(c);
        // 输出结果
        System.out.println(bigger.get());
        executor.shutdown();
    }

    private static class BiggerCallable implements Callable {
        Double d1, d2;
        public BiggerCallable(Double d1, Double d2){
            this.d1 = d1;
            this.d2 = d2;
        }
        @Override
        public Object call() throws Exception {
            return d1>d2?d1:d2;
        }
    }
}
